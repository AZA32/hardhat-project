/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Greeter, GreeterInterface } from "../Greeter";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "call",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "param",
        type: "string",
      },
    ],
    name: "getAbiEncodeSignature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "param",
        type: "string",
      },
    ],
    name: "getAiEncodePacked",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEncode",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "greet",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_b",
        type: "uint256",
      },
    ],
    name: "opAssembly",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    name: "setGreeting",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014ed380380620014ed833981810160405281019062000037919062000278565b62000067604051806060016040528060228152602001620014cb60229139826200008760201b620005e01760201c565b80600090805190602001906200007f92919062000156565b5050620004c5565b620001298282604051602401620000a0929190620002fe565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200012d60201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546200016490620003ea565b90600052602060002090601f016020900481019282620001885760008555620001d4565b82601f10620001a357805160ff1916838001178555620001d4565b82800160010185558215620001d4579182015b82811115620001d3578251825591602001919060010190620001b6565b5b509050620001e39190620001e7565b5090565b5b8082111562000202576000816000905550600101620001e8565b5090565b60006200021d620002178462000362565b62000339565b9050828152602081018484840111156200023657600080fd5b62000243848285620003b4565b509392505050565b600082601f8301126200025d57600080fd5b81516200026f84826020860162000206565b91505092915050565b6000602082840312156200028b57600080fd5b600082015167ffffffffffffffff811115620002a657600080fd5b620002b4848285016200024b565b91505092915050565b6000620002ca8262000398565b620002d68185620003a3565b9350620002e8818560208601620003b4565b620002f381620004b4565b840191505092915050565b600060408201905081810360008301526200031a8185620002bd565b90508181036020830152620003308184620002bd565b90509392505050565b60006200034562000358565b905062000353828262000420565b919050565b6000604051905090565b600067ffffffffffffffff82111562000380576200037f62000485565b5b6200038b82620004b4565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620003d4578082015181840152602081019050620003b7565b83811115620003e4576000848401525b50505050565b600060028204905060018216806200040357607f821691505b602082108114156200041a576200041962000456565b5b50919050565b6200042b82620004b4565b810181811067ffffffffffffffff821117156200044d576200044c62000485565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b610ff680620004d56000396000f3fe60806040526004361061007f5760003560e01c80639f7c82e91161004e5780639f7c82e914610166578063a4136862146101a3578063cfae3217146101cc578063d504ea1d146101f757610086565b80630a4ffb5e146100955780630ab14344146100d257806328b5e32b1461010f578063911a33631461013b57610086565b3661008657005b34801561009257600080fd5b50005b3480156100a157600080fd5b506100bc60048036038101906100b7919061094e565b610222565b6040516100c99190610cdf565b60405180910390f35b3480156100de57600080fd5b506100f960048036038101906100f4919061090d565b610231565b6040516101069190610bdd565b60405180910390f35b34801561011b57600080fd5b5061012461025a565b604051610132929190610b92565b60405180910390f35b34801561014757600080fd5b50610150610367565b60405161015d9190610bc2565b60405180910390f35b34801561017257600080fd5b5061018d6004803603810190610188919061090d565b610398565b60405161019a9190610bdd565b60405180910390f35b3480156101af57600080fd5b506101ca60048036038101906101c5919061090d565b61042f565b005b3480156101d857600080fd5b506101e16104f6565b6040516101ee9190610c1a565b60405180910390f35b34801561020357600080fd5b5061020c610588565b6040516102199190610b70565b60405180910390f35b60008183018060005260206000f35b6060816040516020016102449190610b59565b6040516020818303038152906040529050919050565b600060603073ffffffffffffffffffffffffffffffffffffffff16620186a0671bc16d674ec800003073ffffffffffffffffffffffffffffffffffffffff16639f7c82e96040518163ffffffff1660e01b81526004016102b990610cbf565b60006040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061030e91906108cc565b60405161031b9190610b42565b600060405180830381858888f193505050503d8060008114610359576040519150601f19603f3d011682016040523d82523d6000602084013e61035e565b606091505b50915091509091565b600062ff321360405160200161037d9190610bff565b60405160208183030381529060405280519060200120905090565b6060816040516024016103ab9190610c1a565b6040516020818303038152906040527fa4136862000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b6104dc604051806060016040528060238152602001610f9e602391396000805461045890610e8b565b80601f016020809104026020016040519081016040528092919081815260200182805461048490610e8b565b80156104d15780601f106104a6576101008083540402835291602001916104d1565b820191906000526020600020905b8154815290600101906020018083116104b457829003601f168201915b50505050508361067c565b80600090805190602001906104f2929190610744565b5050565b60606000805461050590610e8b565b80601f016020809104026020016040519081016040528092919081815260200182805461053190610e8b565b801561057e5780601f106105535761010080835404028352916020019161057e565b820191906000526020600020905b81548152906001019060200180831161056157829003601f168201915b5050505050905090565b606060018054806020026020016040519081016040528092919081815260200182805480156105d657602002820191906000526020600020905b8154815260200190600101908083116105c2575b5050505050905090565b61067882826040516024016105f6929190610c3c565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061071b565b5050565b61071683838360405160240161069493929190610c73565b6040516020818303038152906040527f2ced7cef000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061071b565b505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b82805461075090610e8b565b90600052602060002090601f01602090048101928261077257600085556107b9565b82601f1061078b57805160ff19168380011785556107b9565b828001600101855582156107b9579182015b828111156107b857825182559160200191906001019061079d565b5b5090506107c691906107ca565b5090565b5b808211156107e35760008160009055506001016107cb565b5090565b60006107fa6107f584610d1f565b610cfa565b90508281526020810184848401111561081257600080fd5b61081d848285610e58565b509392505050565b600061083861083384610d50565b610cfa565b90508281526020810184848401111561085057600080fd5b61085b848285610e49565b509392505050565b600082601f83011261087457600080fd5b81516108848482602086016107e7565b91505092915050565b600082601f83011261089e57600080fd5b81356108ae848260208601610825565b91505092915050565b6000813590506108c681610f86565b92915050565b6000602082840312156108de57600080fd5b600082015167ffffffffffffffff8111156108f857600080fd5b61090484828501610863565b91505092915050565b60006020828403121561091f57600080fd5b600082013567ffffffffffffffff81111561093957600080fd5b6109458482850161088d565b91505092915050565b6000806040838503121561096157600080fd5b600061096f858286016108b7565b9250506020610980858286016108b7565b9150509250929050565b60006109968383610b24565b60208301905092915050565b60006109ad82610d91565b6109b78185610dbf565b93506109c283610d81565b8060005b838110156109f35781516109da888261098a565b97506109e583610db2565b9250506001810190506109c6565b5085935050505092915050565b610a0981610e08565b82525050565b610a1881610e14565b82525050565b6000610a2982610d9c565b610a338185610dd0565b9350610a43818560208601610e58565b610a4c81610f4c565b840191505092915050565b6000610a6282610d9c565b610a6c8185610de1565b9350610a7c818560208601610e58565b80840191505092915050565b610a9181610e37565b82525050565b6000610aa282610da7565b610aac8185610dec565b9350610abc818560208601610e58565b610ac581610f4c565b840191505092915050565b6000610adb82610da7565b610ae58185610dfd565b9350610af5818560208601610e58565b80840191505092915050565b6000610b0e600183610dec565b9150610b1982610f5d565b602082019050919050565b610b2d81610e2d565b82525050565b610b3c81610e2d565b82525050565b6000610b4e8284610a57565b915081905092915050565b6000610b658284610ad0565b915081905092915050565b60006020820190508181036000830152610b8a81846109a2565b905092915050565b6000604082019050610ba76000830185610a00565b8181036020830152610bb98184610a1e565b90509392505050565b6000602082019050610bd76000830184610a0f565b92915050565b60006020820190508181036000830152610bf78184610a1e565b905092915050565b6000602082019050610c146000830184610a88565b92915050565b60006020820190508181036000830152610c348184610a97565b905092915050565b60006040820190508181036000830152610c568185610a97565b90508181036020830152610c6a8184610a97565b90509392505050565b60006060820190508181036000830152610c8d8186610a97565b90508181036020830152610ca18185610a97565b90508181036040830152610cb58184610a97565b9050949350505050565b60006020820190508181036000830152610cd881610b01565b9050919050565b6000602082019050610cf46000830184610b33565b92915050565b6000610d04610d15565b9050610d108282610ebd565b919050565b6000604051905090565b600067ffffffffffffffff821115610d3a57610d39610f1d565b5b610d4382610f4c565b9050602081019050919050565b600067ffffffffffffffff821115610d6b57610d6a610f1d565b5b610d7482610f4c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b6000819050919050565b600062ffffff82169050919050565b6000819050919050565b6000610e4282610e1e565b9050919050565b82818337600083830152505050565b60005b83811015610e76578082015181840152602081019050610e5b565b83811115610e85576000848401525b50505050565b60006002820490506001821680610ea357607f821691505b60208210811415610eb757610eb6610eee565b5b50919050565b610ec682610f4c565b810181811067ffffffffffffffff82111715610ee557610ee4610f1d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f3200000000000000000000000000000000000000000000000000000000000000600082015250565b610f8f81610e2d565b8114610f9a57600080fd5b5056fe4368616e67696e67206772656574696e672066726f6d202725732720746f2027257327a2646970667358221220f714a0b859eb9deb372315235b58d43b7e4d324953485e5ce913654e08b1f24e64736f6c634300080400334465706c6f79696e67206120477265657465722077697468206772656574696e673a";

type GreeterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GreeterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Greeter__factory extends ContractFactory {
  constructor(...args: GreeterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Greeter";
  }

  deploy(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Greeter> {
    return super.deploy(_greeting, overrides || {}) as Promise<Greeter>;
  }
  getDeployTransaction(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  attach(address: string): Greeter {
    return super.attach(address) as Greeter;
  }
  connect(signer: Signer): Greeter__factory {
    return super.connect(signer) as Greeter__factory;
  }
  static readonly contractName: "Greeter";
  public readonly contractName: "Greeter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GreeterInterface {
    return new utils.Interface(_abi) as GreeterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Greeter {
    return new Contract(address, _abi, signerOrProvider) as Greeter;
  }
}
